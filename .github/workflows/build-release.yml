name: Build iOS & Android

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Release build'

jobs:
  build-android:
    name: 🤖 Android Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Restore Firebase configuration files
        run: |
          echo "${{ secrets.FIREBASE_JSON_CONFIG }}" > firebase.json
          echo "${{ secrets.FIREBASE_OPTIONS_DART }}" > lib/firebase_options.dart
          echo "${{ secrets.ANDROID_FIREBASE_CONFIG }}" | base64 --decode > android/app/google-services.json

      - name: Decode and setup Android keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/upload-keystore.jks
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --release

      - name: Build Android App Bundle (AAB)
        run: flutter build appbundle --release

      - name: Rename build artifacts
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/qBitConnect.apk
          mv build/app/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/qBitConnect.aab

      - name: Upload APK to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/app/outputs/flutter-apk/qBitConnect.apk
          asset_name: qBitConnect.apk
          tag: ${{ github.event.inputs.tag }}
          release_name: qBitConnect ${{ github.event.inputs.tag }}
          overwrite: true
          body: ${{ github.event.inputs.release_notes }}

      - name: Upload AAB to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/app/outputs/bundle/release/qBitConnect.aab
          asset_name: qBitConnect.aab
          tag: ${{ github.event.inputs.tag }}
          release_name: qBitConnect ${{ github.event.inputs.tag }}
          overwrite: true
          body: ${{ github.event.inputs.release_notes }}

  build-ios:
    name: 🍎 iOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Restore Firebase configuration files
        run: |
          echo "${{ secrets.FIREBASE_JSON_CONFIG }}" > firebase.json
          echo "${{ secrets.FIREBASE_OPTIONS_DART }}" > lib/firebase_options.dart
          echo "${{ secrets.IOS_FIREBASE_CONFIG }}" > ios/Runner/GoogleService-Info.plist

      - name: Clean iOS build artifacts
        run: |
          rm -rf ios/Podfile.lock
          rm -rf ios/Pods

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Update CocoaPods repository
        run: pod repo update
        working-directory: ios

      - name: Install CocoaPods (run pod install)
        run: pod install --repo-update
        working-directory: ios

      - name: Create dummy flutterfire command to prevent build script errors
        run: |
          mkdir -p /usr/local/bin
          echo '#!/bin/bash' > /usr/local/bin/flutterfire
          echo 'echo "CI: Skipping flutterfire command - $@"' >> /usr/local/bin/flutterfire
          echo 'exit 0' >> /usr/local/bin/flutterfire
          chmod +x /usr/local/bin/flutterfire
          which flutterfire
          flutterfire --version || true

      - name: Build Flutter iOS app (unsigned)
        run: flutter build ios --release --no-codesign

      - name: Create Payload directory and prepare IPA
        run: |
          set -e
          rm -rf Payload qBitConnect*.ipa
          mkdir -p Payload
          
          # Flutter build output location
          APP_PATH="build/ios/iphoneos/Runner.app"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "ERROR: Runner.app not found at $APP_PATH"
            echo "Searching for Runner.app..."
            find build -name "Runner.app" -type d 2>/dev/null || echo "No Runner.app found"
            exit 1
          fi
          
          echo "Found Runner.app at: $APP_PATH"
          cp -r "$APP_PATH" Payload/
          IPA_NAME="qBitConnect.ipa"
          zip -qq -r -9 "$IPA_NAME" Payload
          echo "✓ Created $IPA_NAME"

      # ---- NEW: install flutterfire CLI and upload symbols if token present ----
      - name: Install FlutterFire CLI
        run: |
          set -e
          echo "Installing FlutterFire CLI..."
          dart pub global activate flutterfire_cli
          echo "PATH=\"$HOME/.pub-cache/bin:\$PATH\"" >> $GITHUB_ENV

      - name: Upload Crashlytics symbols (optional)
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -e
          if [ -z "${FIREBASE_TOKEN}" ]; then
            echo "FIREBASE_TOKEN not set — skipping Crashlytics symbol upload (CI)."
            exit 0
          fi
          if ! command -v flutterfire >/dev/null 2>&1; then
            echo "flutterfire CLI not found on PATH — skipping Crashlytics symbol upload."
            exit 0
          fi
          echo "Uploading dSYMs to Firebase Crashlytics..."
          # If your dSYMs are in a different path adjust accordingly
          flutterfire upload-crashlytics-symbols --app ios || true

      - name: Upload IPA to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: qBitConnect.ipa
          asset_name: qBitConnect.ipa
          tag: ${{ github.event.inputs.tag }}
          release_name: qBitConnect ${{ github.event.inputs.tag }}
          overwrite: true
          body: |
            ${{ github.event.inputs.release_notes }}
            
            **Note:** iOS build is unsigned IPA for AltStore/sideloading.
