name: iOS-ipa-build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'

jobs:
  build-ios:
    name: ðŸŽ‰ iOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Restore Firebase configuration files
        run: |
          echo "${{ secrets.FIREBASE_JSON_CONFIG }}" > firebase.json
          echo "${{ secrets.FIREBASE_OPTIONS_DART }}" > lib/firebase_options.dart
          echo "${{ secrets.IOS_FIREBASE_CONFIG }}" > ios/Runner/GoogleService-Info.plist

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Update CocoaPods repository
        run: pod repo update
        working-directory: ios

      - name: Install CocoaPods (run pod install)
        run: pod install --verbose
        working-directory: ios

      - name: "Optional: flutter clean"
        run: flutter clean

      - name: Build Flutter iOS app (unsigned - may fail, that's OK)
        run: flutter build ios --release --no-codesign || echo "Flutter build completed, continuing..."

      - name: Build unsigned IPA with xcodebuild directly
        run: |
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath ../build \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            build
        working-directory: ios

      - name: Create Payload directory and prepare IPA
        run: |
          set -e
          rm -rf Payload FlutterIpaExport.ipa
          mkdir -p Payload
          # Try common output locations; prefer ios/build/Release-iphoneos
          APP_PATH=""
          if [ -d "ios/build/Release-iphoneos/Runner.app" ]; then
            APP_PATH="ios/build/Release-iphoneos/Runner.app"
          else
            # fallback: search for Runner.app under ios/build
            APP_PATH=$(find ios/build -type d -name "Runner.app" -print -quit || true)
          fi
          if [ -z "$APP_PATH" ]; then
            echo "ERROR: Runner.app not found under ios/build. Build possibly failed or path changed."
            echo "Contents of ios/build:"
            ls -la ios/build || true
            exit 1
          fi
          echo "Using app at: $APP_PATH"
          cp -r "$APP_PATH" Payload/
          zip -qq -r -9 FlutterIpaExport.ipa Payload

      # ---- NEW: install flutterfire CLI and upload symbols if token present ----
      - name: Install FlutterFire CLI
        run: |
          set -e
          echo "Installing FlutterFire CLI..."
          dart pub global activate flutterfire_cli
          echo "PATH=\"$HOME/.pub-cache/bin:\$PATH\"" >> $GITHUB_ENV

      - name: Upload Crashlytics symbols (optional)
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -e
          if [ -z "${FIREBASE_TOKEN}" ]; then
            echo "FIREBASE_TOKEN not set â€” skipping Crashlytics symbol upload (CI)."
            exit 0
          fi
          if ! command -v flutterfire >/dev/null 2>&1; then
            echo "flutterfire CLI not found on PATH â€” skipping Crashlytics symbol upload."
            exit 0
          fi
          echo "Uploading dSYMs to Firebase Crashlytics..."
          # If your dSYMs are in a different path adjust accordingly
          flutterfire upload-crashlytics-symbols --app ios || true

      - name: Upload IPA to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: FlutterIpaExport.ipa
          tag: ${{ github.event.inputs.tag }}
          overwrite: true
          body: "Unsigned IPA for AltStore (CI build)."
