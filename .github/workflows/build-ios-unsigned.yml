name: Build Unsigned IPA for AltStore

on:
  workflow_dispatch: # Manually trigger builds
  push:
    branches: [ master ]
    tags:
      - "v*.*.*" # Trigger on version tags

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.2"
          channel: 'stable'
          cache: true

      - name: Setup Firebase Configuration
        run: |
          echo "${{ secrets.FIREBASE_JSON_CONFIG }}" > android/app/google-services.json
          echo "${{ secrets.IOS_FIREBASE_CONFIG }}" > ios/Runner/GoogleService-Info.plist
          echo "${{ secrets.FIREBASE_OPTIONS_DART }}" > lib/firebase_options.dart

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Generate Flutter build files
        run: |
          # Generate necessary Flutter files without requiring signing
          flutter precache --ios
          flutter packages pub run build_runner build --delete-conflicting-outputs || true

      - name: Create proper Flutter build settings
        run: |
          # Get Flutter root
          FLUTTER_ROOT=$(which flutter | sed 's|/bin/flutter||')
          echo "Flutter root: $FLUTTER_ROOT"
          
          # Create the Generated.xcconfig file with proper format
          mkdir -p ios/Flutter
          cat > ios/Flutter/Generated.xcconfig << EOF
          FLUTTER_ROOT=$FLUTTER_ROOT
          FLUTTER_APPLICATION_PATH=/Users/runner/work/qbitconnect/qbitconnect
          COCOAPODS_PARALLEL_CODE_SIGN=true
          FLUTTER_BUILD_DIR=build
          FLUTTER_BUILD_NAME=1.4.3
          FLUTTER_BUILD_NUMBER=16
          EXCLUDED_ARCHS[sdk=iphonesimulator*]=i386
          EXCLUDED_ARCHS[sdk=iphoneos*]=armv7
          DART_OBFUSCATION=false
          TRACK_WIDGET_CREATION=true
          TREE_SHAKE_ICONS=false
          PACKAGE_CONFIG=.dart_tool/package_config.json
          EOF
          
          # Also create Release.xcconfig
          cat > ios/Flutter/Release.xcconfig << EOF
          #include "Generated.xcconfig"
          FLUTTER_BUILD_MODE=release
          EOF
          
          # Create Debug.xcconfig
          cat > ios/Flutter/Debug.xcconfig << EOF
          #include "Generated.xcconfig"
          FLUTTER_BUILD_MODE=debug
          EOF

      - name: Disable all code signing
        run: |
          # Comprehensive code signing removal
          python3 << 'EOF'
          import re
          
          pbxproj = 'ios/Runner.xcodeproj/project.pbxproj'
          with open(pbxproj, 'r') as f:
              content = f.read()
          
          # Remove all signing
          replacements = [
              (r'CODE_SIGN_STYLE = Automatic;', 'CODE_SIGN_STYLE = Manual;'),
              (r'DEVELOPMENT_TEAM = [^;]+;', 'DEVELOPMENT_TEAM = "";'),
              (r'CODE_SIGN_IDENTITY = "[^"]*";', 'CODE_SIGN_IDENTITY = "";'),
              (r'"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "[^"]*";', '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "";'),
              (r'PROVISIONING_PROFILE_SPECIFIER = [^;]+;', ''),
          ]
          
          for pattern, replacement in replacements:
              content = re.sub(pattern, replacement, content)
          
          # Add signing disabled flags globally
          if 'CODE_SIGNING_REQUIRED = NO;' not in content:
              # Add to all buildSettings sections
              content = re.sub(
                  r'(buildSettings = \{)',
                  r'\1\n\t\t\t\tCODE_SIGNING_REQUIRED = NO;\n\t\t\t\tCODE_SIGNING_ALLOWED = NO;',
                  content
              )
          
          with open(pbxproj, 'w') as f:
              f.write(content)
          print("âœ… Disabled all code signing")
          EOF

      - name: Build iOS app with xcodebuild
        run: |
          cd ios
          
          # Build using xcodebuild with all signing disabled
          xcodebuild \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath $PWD/build/Runner.xcarchive \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE_SPECIFIER="" \
            archive
          
          cd ..

      - name: Create IPA from archive
        run: |
          # Get version info first
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //g' | sed 's/+.*//g')
          BUILD=$(grep "version:" pubspec.yaml | sed 's/.*+//g')
          echo "Built version: $VERSION ($BUILD)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV
          
          # Create Payload directory
          mkdir -p Payload
          
          # Copy the built .app bundle from archive
          cp -r ios/build/Runner.xcarchive/Products/Applications/Runner.app Payload/
          
          # Create IPA (which is just a zip file with .ipa extension)
          zip -r qBitConnect-unsigned.ipa Payload
          
          # Cleanup
          rm -rf Payload

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: qBitConnect-Unsigned-IPA-${{ env.VERSION }}
          path: qBitConnect-unsigned.ipa
          retention-days: 30

      - name: Create Release (if tagged)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: qBitConnect-unsigned.ipa
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
